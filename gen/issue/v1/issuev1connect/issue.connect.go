// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: issue/v1/issue.proto

package issuev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "coupon-issuance-system/gen/issue/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IssueServiceName is the fully-qualified name of the IssueService service.
	IssueServiceName = "issue.v1.IssueService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IssueServiceIssueCouponProcedure is the fully-qualified name of the IssueService's IssueCoupon
	// RPC.
	IssueServiceIssueCouponProcedure = "/issue.v1.IssueService/IssueCoupon"
)

// IssueServiceClient is a client for the issue.v1.IssueService service.
type IssueServiceClient interface {
	IssueCoupon(context.Context, *connect.Request[v1.IssueCouponRequest]) (*connect.Response[v1.IssueCouponResponse], error)
}

// NewIssueServiceClient constructs a client for the issue.v1.IssueService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIssueServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IssueServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	issueServiceMethods := v1.File_issue_v1_issue_proto.Services().ByName("IssueService").Methods()
	return &issueServiceClient{
		issueCoupon: connect.NewClient[v1.IssueCouponRequest, v1.IssueCouponResponse](
			httpClient,
			baseURL+IssueServiceIssueCouponProcedure,
			connect.WithSchema(issueServiceMethods.ByName("IssueCoupon")),
			connect.WithClientOptions(opts...),
		),
	}
}

// issueServiceClient implements IssueServiceClient.
type issueServiceClient struct {
	issueCoupon *connect.Client[v1.IssueCouponRequest, v1.IssueCouponResponse]
}

// IssueCoupon calls issue.v1.IssueService.IssueCoupon.
func (c *issueServiceClient) IssueCoupon(ctx context.Context, req *connect.Request[v1.IssueCouponRequest]) (*connect.Response[v1.IssueCouponResponse], error) {
	return c.issueCoupon.CallUnary(ctx, req)
}

// IssueServiceHandler is an implementation of the issue.v1.IssueService service.
type IssueServiceHandler interface {
	IssueCoupon(context.Context, *connect.Request[v1.IssueCouponRequest]) (*connect.Response[v1.IssueCouponResponse], error)
}

// NewIssueServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIssueServiceHandler(svc IssueServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	issueServiceMethods := v1.File_issue_v1_issue_proto.Services().ByName("IssueService").Methods()
	issueServiceIssueCouponHandler := connect.NewUnaryHandler(
		IssueServiceIssueCouponProcedure,
		svc.IssueCoupon,
		connect.WithSchema(issueServiceMethods.ByName("IssueCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	return "/issue.v1.IssueService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IssueServiceIssueCouponProcedure:
			issueServiceIssueCouponHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIssueServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIssueServiceHandler struct{}

func (UnimplementedIssueServiceHandler) IssueCoupon(context.Context, *connect.Request[v1.IssueCouponRequest]) (*connect.Response[v1.IssueCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("issue.v1.IssueService.IssueCoupon is not implemented"))
}
