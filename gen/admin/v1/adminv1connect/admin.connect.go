// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/admin.proto

package adminv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "coupon-issuance-system/gen/admin/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CampaignServiceName is the fully-qualified name of the CampaignService service.
	CampaignServiceName = "admin.v1.CampaignService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CampaignServiceCreateCampaignProcedure is the fully-qualified name of the CampaignService's
	// CreateCampaign RPC.
	CampaignServiceCreateCampaignProcedure = "/admin.v1.CampaignService/CreateCampaign"
	// CampaignServiceGetCampaignProcedure is the fully-qualified name of the CampaignService's
	// GetCampaign RPC.
	CampaignServiceGetCampaignProcedure = "/admin.v1.CampaignService/GetCampaign"
	// CampaignServiceGetSimpleCampaignProcedure is the fully-qualified name of the CampaignService's
	// GetSimpleCampaign RPC.
	CampaignServiceGetSimpleCampaignProcedure = "/admin.v1.CampaignService/GetSimpleCampaign"
)

// CampaignServiceClient is a client for the admin.v1.CampaignService service.
type CampaignServiceClient interface {
	CreateCampaign(context.Context, *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error)
	GetCampaign(context.Context, *connect.Request[v1.GetCampaignRequest]) (*connect.Response[v1.GetCampaignResponse], error)
	GetSimpleCampaign(context.Context, *connect.Request[v1.GetSimpleCampaignRequest]) (*connect.Response[v1.GetSimpleCampaignResponse], error)
}

// NewCampaignServiceClient constructs a client for the admin.v1.CampaignService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCampaignServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CampaignServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	campaignServiceMethods := v1.File_admin_v1_admin_proto.Services().ByName("CampaignService").Methods()
	return &campaignServiceClient{
		createCampaign: connect.NewClient[v1.CreateCampaignRequest, v1.CreateCampaignResponse](
			httpClient,
			baseURL+CampaignServiceCreateCampaignProcedure,
			connect.WithSchema(campaignServiceMethods.ByName("CreateCampaign")),
			connect.WithClientOptions(opts...),
		),
		getCampaign: connect.NewClient[v1.GetCampaignRequest, v1.GetCampaignResponse](
			httpClient,
			baseURL+CampaignServiceGetCampaignProcedure,
			connect.WithSchema(campaignServiceMethods.ByName("GetCampaign")),
			connect.WithClientOptions(opts...),
		),
		getSimpleCampaign: connect.NewClient[v1.GetSimpleCampaignRequest, v1.GetSimpleCampaignResponse](
			httpClient,
			baseURL+CampaignServiceGetSimpleCampaignProcedure,
			connect.WithSchema(campaignServiceMethods.ByName("GetSimpleCampaign")),
			connect.WithClientOptions(opts...),
		),
	}
}

// campaignServiceClient implements CampaignServiceClient.
type campaignServiceClient struct {
	createCampaign    *connect.Client[v1.CreateCampaignRequest, v1.CreateCampaignResponse]
	getCampaign       *connect.Client[v1.GetCampaignRequest, v1.GetCampaignResponse]
	getSimpleCampaign *connect.Client[v1.GetSimpleCampaignRequest, v1.GetSimpleCampaignResponse]
}

// CreateCampaign calls admin.v1.CampaignService.CreateCampaign.
func (c *campaignServiceClient) CreateCampaign(ctx context.Context, req *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error) {
	return c.createCampaign.CallUnary(ctx, req)
}

// GetCampaign calls admin.v1.CampaignService.GetCampaign.
func (c *campaignServiceClient) GetCampaign(ctx context.Context, req *connect.Request[v1.GetCampaignRequest]) (*connect.Response[v1.GetCampaignResponse], error) {
	return c.getCampaign.CallUnary(ctx, req)
}

// GetSimpleCampaign calls admin.v1.CampaignService.GetSimpleCampaign.
func (c *campaignServiceClient) GetSimpleCampaign(ctx context.Context, req *connect.Request[v1.GetSimpleCampaignRequest]) (*connect.Response[v1.GetSimpleCampaignResponse], error) {
	return c.getSimpleCampaign.CallUnary(ctx, req)
}

// CampaignServiceHandler is an implementation of the admin.v1.CampaignService service.
type CampaignServiceHandler interface {
	CreateCampaign(context.Context, *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error)
	GetCampaign(context.Context, *connect.Request[v1.GetCampaignRequest]) (*connect.Response[v1.GetCampaignResponse], error)
	GetSimpleCampaign(context.Context, *connect.Request[v1.GetSimpleCampaignRequest]) (*connect.Response[v1.GetSimpleCampaignResponse], error)
}

// NewCampaignServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCampaignServiceHandler(svc CampaignServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	campaignServiceMethods := v1.File_admin_v1_admin_proto.Services().ByName("CampaignService").Methods()
	campaignServiceCreateCampaignHandler := connect.NewUnaryHandler(
		CampaignServiceCreateCampaignProcedure,
		svc.CreateCampaign,
		connect.WithSchema(campaignServiceMethods.ByName("CreateCampaign")),
		connect.WithHandlerOptions(opts...),
	)
	campaignServiceGetCampaignHandler := connect.NewUnaryHandler(
		CampaignServiceGetCampaignProcedure,
		svc.GetCampaign,
		connect.WithSchema(campaignServiceMethods.ByName("GetCampaign")),
		connect.WithHandlerOptions(opts...),
	)
	campaignServiceGetSimpleCampaignHandler := connect.NewUnaryHandler(
		CampaignServiceGetSimpleCampaignProcedure,
		svc.GetSimpleCampaign,
		connect.WithSchema(campaignServiceMethods.ByName("GetSimpleCampaign")),
		connect.WithHandlerOptions(opts...),
	)
	return "/admin.v1.CampaignService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CampaignServiceCreateCampaignProcedure:
			campaignServiceCreateCampaignHandler.ServeHTTP(w, r)
		case CampaignServiceGetCampaignProcedure:
			campaignServiceGetCampaignHandler.ServeHTTP(w, r)
		case CampaignServiceGetSimpleCampaignProcedure:
			campaignServiceGetSimpleCampaignHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCampaignServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCampaignServiceHandler struct{}

func (UnimplementedCampaignServiceHandler) CreateCampaign(context.Context, *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.CampaignService.CreateCampaign is not implemented"))
}

func (UnimplementedCampaignServiceHandler) GetCampaign(context.Context, *connect.Request[v1.GetCampaignRequest]) (*connect.Response[v1.GetCampaignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.CampaignService.GetCampaign is not implemented"))
}

func (UnimplementedCampaignServiceHandler) GetSimpleCampaign(context.Context, *connect.Request[v1.GetSimpleCampaignRequest]) (*connect.Response[v1.GetSimpleCampaignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.CampaignService.GetSimpleCampaign is not implemented"))
}
